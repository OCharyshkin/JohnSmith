{"id":"introduce_binding","title":"Introducing binding","children":[{"id":"static_binding","title":"Static value binding","children":[],"isNew":false,"markup":"<div id=\"staticBindingExample\">\n    <p>My first name is <span class=\"firstName\"></span></p>\n    <p>My last name is <span class=\"lastName\"></span></p>\n</div>\n","code":"js.bind(\"John\").to(\"#staticBindingExample .firstName\");\njs.bind(\"Smith\").to(\"#staticBindingExample .lastName\");","description":"<p>\n    <p>This example shows how static string value can be bound to DOM element.</p>\n\n    <p>\n        Binding to a static value is not a common case but it demonstrates a\n        very simple scenario of JohnSmith API usage.\n    </p>\n</p>"},{"id":"dynamic_binding","title":"Dynamic value binding","children":[],"isNew":false,"markup":"<div id=\"dynamicBindingExample\">\n    <p>My first name is <span class=\"firstName\"></span></p>\n    <p>My last name is <span class=\"lastName\"></span></p>\n</div>\n","code":"var firstName = js.bindableValue();\nvar lastName = js.bindableValue();\n\njs.bind(firstName).to(\"#dynamicBindingExample .firstName\");\njs.bind(lastName).to(\"#dynamicBindingExample .lastName\");\n\nfirstName.setValue(\"John\");\nlastName.setValue(\"Smith\");","description":"<p>\n    This example demonstrates how you can bind dynamic values.\n</p>\n<p>\n    As a first step, you need to create a <code>bindableValue</code> &mdash; an observable object that could\n    notify listeners about value changes.\n</p>\n<p>\n    Than you can wire this object with DOM element using <code>js.bind</code> function.\n</p>\n<p>\n    As soon as binding is configured, you can call setValue method to change the value. The change reflects in the UI immediately.\n</p>"},{"id":"display_current_time","title":"Display current time","children":[],"isNew":false,"markup":"<div id='currentTime'></div>","code":"var currentTime = js.bindableValue();                    // create bindable value\ncurrentTime.setValue(\"...\");                             // set default value (not required)\n\nwindow.setInterval(function(){                           // this code will update bindable\n    var timeString = new Date().toLocaleTimeString();    // value every second\n    currentTime.setValue(timeString);\n}, 1000);\n\njs.bind(currentTime).to(\"#currentTime\");                 // do binding\n","description":"<p>\n    This example demonstrates using bindable value for displaying current time.\n</p>\n\n<p>\n    <code>setInterval</code> method callback changes <code>currentTime</code> variable value and current time displays\n    in corresponding markup element.\n</p>"},{"id":"viewModel","title":"View model","children":[],"isNew":false,"markup":"<div id=\"viewModel\">\n    <div class=\"firstName\"></div>\n    <div class=\"lastName\"></div>\n</div>","code":"// Declare view model class\nvar PersonViewModel = function(){\n    this.firstName = js.bindableValue();\n    this.lastName = js.bindableValue();\n\n    this.doSomething = function(){\n        this.firstName.setValue(\"John\");\n        this.lastName.setValue(\"Smith\");\n    }\n}\n\n// Create view model instance\nvar meViewModel = new PersonViewModel();\n\n// Using view model instance\njs.bind(meViewModel.firstName).to(\"#viewModel .firstName\");\njs.bind(meViewModel.lastName).to(\"#viewModel .lastName\");\n\nmeViewModel.doSomething();","description":"<p>\n    <strong>ViewModel</strong> is an objects that acts as a mediator between business logic and view logic.\n    ViewModel exposes bindable properties and functions that could be consumed by corresponding views.\n</p>\n\n<p>\n    It is a common practice to declare ViewModel \"classes\" to handle it's logic. This example demonstrates simple\n    ViewModel class that exposes only 2 bindable variables: first name and last name. In the example these variables\n    are used for configuring binding but in a real application <strong>ViewModel</strong> usually works with\n    <strong>View</strong> object.\n</p>\n"},{"id":"custom_callback","title":"Using callback function","children":[],"isNew":false,"markup":"<div id=\"callbacksConsole\"></div>","code":"var name = js.bindableValue();\n\njs.bind(name).to(function(){\n    $(\"#callbacksConsole\").append('simple callback called');\n});\n\nname.setValue(\"John Smith\");","description":"<p>\n    You can use callback functions to react on bindable value change.\n    Such callbacks could be useful if you need to implement some sort of special behavior like running jQuery effects,\n    hiding/showing blocks and so on.\n</p>"},{"id":"bidirectionalBinding","title":"Bidirectional binding","children":[],"isNew":false,"markup":"<form class=\"form-horizontal\">\n    <div class=\"control-group\">\n        <label for=\"firstNameInput\" class=\"control-label\">First name:</label>\n        <div class=\"controls\">\n            <input id=\"firstNameInput\" type=\"text\" />\n        </div>\n    </div>\n\n    <div class=\"control-group\">\n        <label for=\"lastNameInput\" class=\"control-label\">Last name:</label>\n        <div class=\"controls\">\n            <input id=\"lastNameInput\" type=\"text\" />\n        </div>\n    </div>\n\n    <div class=\"control-group\">\n        <label for=\"bioInput\" class=\"control-label\">Bio:</label>\n        <div class=\"controls\">\n            <textarea id=\"bioInput\"></textarea>\n        </div>\n    </div>\n\n    <div class=\"control-group\">\n        <label for=\"rememberMeInput\" class=\"control-label\">Remember me</label>\n        <div class=\"controls\">\n            <input id=\"rememberMeInput\" type=\"checkbox\" />\n        </div>\n    </div>\n</form>\n\n\n<div id=\"summary\" class=\"\">\n    <table class=\"table table-bordered\">\n        <thead>\n            <tr>\n                <th>First name</th>\n                <th>Last name</th>\n                <th>Bio</th>\n                <th>Remember me</th>\n            </tr>\n        </thead>\n        <tr>\n            <td class=\"firstName\"></td>\n            <td class=\"lastName\"></td>\n            <td class=\"bio\"></td>\n            <td class=\"rememberMe\"></td>\n        </tr>\n    </table>\n</div>","code":"var UserViewModel = function(){\n    this.firstName = js.bindableValue();\n    this.lastName = js.bindableValue();\n    this.bio = js.bindableValue();\n    this.rememberMe = js.bindableValue();\n\n    this.setDefaultValues = function(){\n        this.firstName.setValue(\"John\");\n        this.lastName.setValue(\"Smith\");\n        this.bio.setValue(\"text\");\n    };\n};\n\nvar viewModel = new UserViewModel();\n\n// Set up bindings\njs.bind(viewModel.firstName)\n    .to(\"#firstNameInput\")\n    .to(\"#summary .firstName\");\n\njs.bind(viewModel.lastName)\n    .to(\"#lastNameInput\", { event: \"keyup\" })\n    .to(\"#summary .lastName\");\n\njs.bind(viewModel.bio)\n    .to(\"#bioInput\")\n    .to(\"#summary .bio\");\n\njs.bind(viewModel.rememberMe)\n    .to(\"#rememberMeInput\")\n    .to(\"#summary .rememberMe\");\n\nviewModel.setDefaultValues();\n","description":"<p>\n    This example demonstrates bi-directional binding usage.\n    By default John Smith makes any binding to form elements bidirectional.\n    If you wand input value wire to be unidirectional, pass this options to binding config:\n</p>\n\n<pre><code class=\"javascript\">{ bidirectional: false }</code></pre>\n\n<p>Note that for <code>lastName</code> custom event type is set:</p>\n\n<pre><code class=\"javascript\">{ event: \"keyup\" }</code></pre>\n\n<p>Because of this option Last Name change occur on key up instead of field leave.</p>\n\n<div class=\"alert alert-block alert-error\">\n    <p>\n        <strong>John Smith does not really like bi-directional binding.</strong>\n        Such kind of binding can easily lead you to bad design.\n    </p>\n\n    <p>\n        Nevertheless, bi-directional wires are handy when you work with form elements (like input, textearea etc).\n        But make sure you never never never listen to bindable value changes in <strong>View Model</strong> code.\n        Bindable notifications are for View only! Not for View Model! If you feel you need to listen to changes in View Model,\n        this probably indicates that bi-directional binding should be changed to regular binding plus regular event handler.\n    </p>\n</div>\n\n<div class=\"alert alert-block\">\n    <p>Note how <code>to</code> method calls chained:</p>\n\n    <pre><code class=\"javascript\">js.bind(/*...*/)\n        .to(/* something */)\n        // ...more 'to' cals can go here...\n        .to(/* something */);</code></pre>\n\n    <p>You can use these chains any time you need to bind a single variable to multiple handlers.</p>\n</div>"}],"isNew":false,"description":"<div class=\"row-fluid\">\n    <div class=\"span6\">\n        Content coming soon..\n    </div>\n</div>\n"}